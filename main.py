import numpy
import numpy as np
import cv2

from dtaidistance import dtw
from dtaidistance import  dtw_visualisation as dtwvis
def calc_hist(flow):
    mag, ang = cv2.cartToPolar(flow[..., 0], flow[..., 1], angleInDegrees=1)

    q1 = ((0 < ang) & (ang <= 45)).sum()
    q2 = ((45 < ang) & (ang <= 90)).sum()
    q3 = ((90 < ang) & (ang <= 135)).sum()
    q4 = ((135 < ang) & (ang <= 180)).sum()
    q5 = ((180 < ang) & (ang <= 225)).sum()
    q6 = ((225 <= ang) & (ang <= 270)).sum()
    q7 = ((270 < ang) & (ang <= 315)).sum()
    q8 = ((315 < ang) & (ang <= 360)).sum()

    hist = [q1, q2, q3, q4, q5, q6, q7, q8]

    return (hist)


def process_video():
    video_hist = []
    hog_list = []
    sum_desc = []
    bins_n = 8

    cap = cv2.VideoCapture('./louder.mp4')
    ret, prev = cap.read()

    prevgray = cv2.cvtColor(prev, cv2.COLOR_BGR2GRAY)
    hog = cv2.HOGDescriptor()

    while True:

        ret, img = cap.read()

        if not ret: break

        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        flow = cv2.calcOpticalFlowFarneback(prevgray, gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)

        prevgray = gray

        bins = np.hsplit(flow, bins_n)

        out_bins = []
        for b in bins:
            out_bins.append(np.vsplit(b, bins_n))

        frame_hist = []
        for col in out_bins:

            for block in col:
                frame_hist.append(calc_hist(block))

        video_hist.append(np.matrix(frame_hist))

    # average per frame
    sum_desc = video_hist[0]
    for i in range(1, len(video_hist)):
        sum_desc = sum_desc + video_hist[i]

    ave = sum_desc / len(video_hist)
    maxx = np.amax(video_hist, 0)
    maxx = np.matrix(maxx)


    ave_desc = np.asarray(ave)
    a_desc = []
    #a_desc.append(np.asarray(ave_desc, dtype=np.uint8).ravel())
    a_desc=np.asarray(ave_desc, dtype=np.uint8).ravel()
    label=1
    max_desc = np.asarray(maxx)
    m_desc = []
    m_desc = np.asarray(max_desc, dtype=np.uint8).ravel()

    #path=dtw.warping_path(a_desc,m_desc)
    #distance=dtw.distance(m_desc,a_desc)


    #print(m_desc)
    print(a_desc)
    numpy.savetxt("louder.txt",a_desc)
    #return a_desc, label, m_desc

def read_data(dir_str):
    data_tmp=[]
    with open(dir_str) as fdata:
        while True:
            line=fdata.readline()
            if not line:
                break
            data_tmp.append([float(i) for i in line.split()])
    return np.array(data_tmp)
def calculatedistance():
    next=read_data('./next.txt')
    nexttest=read_data('./nexttest.txt')
    before=read_data('./before.txt')
    beforetest = read_data('./beforetest.txt')
    louder = read_data('./louder.txt')
    distance1 = dtw.distance(before,nexttest)
    distance2=dtw.distance(before,beforetest )
    print(distance1)
    print(distance2)

if __name__ == '__main__':
    #process_video('./louder.mp4')
    #process_video()
    calculatedistance()


"""before
[ 85  66  16  41  59   0 228 236 252 235 174 114 250 192  75 207 105 235
 219 245 183 132 223 159 243 177 156 136  55  53 170 253 107  72  88  40
 120 250 137 173 207  59 249 227 132 222  14 135  81 188 251 241 208 200
  93 239  83 136 162 125   1  67   4 154 100 103  58 140 102  49 189 248
  99 172 200 112  27 189 238 208  30 225   3  23 231 158 136 180 243   3
  94 168  41 123 247  70 162  13  47  28  74 219  25 165 239 186 156  88
  16 124  86  93 194 124  88  10 146 239 245 198 178 163 153 212 138 255
  19 127 124  84  64 248 213  97 163 250  32  50 255  19 229  31 124 248
 209 246 150 105  10 169 109 245  70 174 146 115 163 157 184 237  39 210
 209 187  47  32  87 177 207 220 161 222 113   9   4  50 148 151  30 119
 220 228 168 180 179  59 105  70  82  69 111  57  80  64 168 212 248 139
 183 150 142   8 137 178 163  34 242  84 148 152 108 139 109 221 184 183
  22 181 120 154  95 187 248 238 219 145 115 155 196 192 175  48  44 249
 129 152  85  10  37  27 107  13  36 199  12 244 239 139 185   5 184  92
  88 177 192  65 242 230 190 168 214 119 141 196 136  57 233  82  12 254
  26 187 156 179  89  96 172  57 197  40 171  99 133 172  65 194 193 218
  39 128  99  39  81 103 178  65  16 181 179 149  83 190 204 242 133   2
  77 195  26 124 213 217  78  61 174  66   6  86  47 214   8 236 221 162
 254  37 202 123   2  57  37  29 126 144 182 156  96  32 175  20  27  52
 155 175 239  51  78  79 254  56 237 252  38 190 243 109 213 172 236  42
 228 144 103  86 179 175  67   6 110  27 232  28 224 117  94 156  82 193
 134  38 142 142 217  42 117 117 101 100 105 173  50 226  90  22  35 107
  37 139  49 253 181  57  29 244  65 163  67 182  75 188 170 132 172  81
 191 235 109 162  57  75 176  49 106 254 107  34 166  73 145 174 230  59
 219 239 143  64  55 252 153 119 209 163  56 158 200 126 213 119 128 179
 237  11  66 177 162  29 147 214  57 102 195 204 182 141 193  86 129 118
  83 177  93 109 131  51 161 225 132 237  34  17  27  11  28  81 105 126
  86  11 128 205 169 158 227 104 202  50 178  42 104 191 226  11  54 182
 174 152  71   4 181  68  43  38]
 
 beforetest
 [ 33 164 114  72  88 222  84 211 241 140 154  11  21  96  96 230 178  56
 179  89   9 243 195  38  68  48 249 144 232 107 182 213  43 202 228 233
 107 181  24 226 203 119  20  33 224 187 150  51 195 200 219  94  64 250
 255 223  61  51 188 231 143 119 206 245  64  96 210  28 104 176 217  93
 125 196 228  49 103  90 208 245 238 202  36 217 101 104 253  94  71 156
 173  27  93 172 131 165  10 176 140 227 135 122 246 189 135 232 227 194
 209  30 210   6 145  74 186 196 169  41 222 211 177  10 240  91 136 171
  87  75  95 220 134  67 127 194 166 241 198 172  55  10  65 125 202 160
 204 118 161 208 161  50  68  17  27 178  67 141 173  78  51  16 229 206
  24 236  89 211 120 128  47 119 235  49 235  63  88 153 242 100 225  26
  38  84  94 179  38   2   9  61 172  62 135 253 206   1  98 242 169  13
  85 173 204 106 106   4 151 178 235   3 148 119  52 213 151 182 234 145
  91 179  99  25  22  56 193  66 127  52 176 179 124 208 237 141 236   7
  61  38 254 206  74 111 138  66 249 157 124  41  83 128 113  30  48  27
 175 220 158 217 228  84 159 241  68  41 170 253 142   6  12  20  63  48
 237 204  18 173 157  96 193 106 238   6   9  15  75 227 157 133 132 241
  13 227  21  71 111  19 190  80  80   6  26 254 180 151   8  27 187  70
 105   7 183 157 195  85 140  87 182  35 210 249 226 115  67 251 178  39
 112 113  38 190 120  50 121 178 118 160 174  67  15 108 224  49  46  82
 120  88 141 224  17 198 227  26  68  86  35 118 254  71 130  80 210  89
 227 182 160  40  47 236  49  47 245 141 223 163 122 182 190 234 136 136
 162  89 132 167 110  55  63  60  22 184 136 245 191  87 180  22 232  64
 193  87   3 208  24 139  88  48  82   8 228 114 136 246 240  52 205 231
 250 140  56 103  65  60 222 178 100 204  56 139   1 120 153  66 101  95
  86 255 138  78  27  87  25  37  79 157  41 166 155 113  73 204  72 176
 213 238 200  93 150 102  76 216  27  71  31 219  23  68 143 119 109 102
  51 173   6  30 219   6 152 162  28 183 143  95  15   0  46 223 114 116
 205  14 220 197  63 246  41 147 107 223   8 187 212 140 102  86 157  95
  83 167  67  10 184  91  51  78]
nexttext
[ 57  74 106 238  16 206 149 142 195  56 171 239 118 174 207  83  55 229
 203  10 229  94   1 168 236  82 156  23  64 144  91 193  24 208 145  77
 180  74 209  70 196  68 208   5 202 244  45  20  82 100 165 172   8  49
 172 239 189 235 174 168  47  48 150 233  81  97 111 121 210  11 128 230
  34 162 147 117  11 128 108  24 229 170 230 233  40  71  97 174 251 184
  86 221  24  17 231 232 204 254 154 237 145  46 252 209 131  95  67 221
 152  11 222  88  89  55 159  39  51  43 223  74 241  18 236 165 225  98
  94 168   1 164  21 113 190   1 117 124 152   6  90 240  38  86  92  29
 214   9  96 243  75  99  20 232 174 160 172 123 167 246 204 255  70 170
 175 159  64 106 116 128  54   3 150   3   2   2  47 215 235 197 183 178
 163  35  71 183 221 153  70 248  51 222  86 195 183 125 148  65 207 188
 115 213  53  37  23  89  12 184  78   1 192  64  25  98 172  61 150 227
  93  49 218  10 105 157 152 203 128 133 106 162   2 206 136 115  90 156
  17  55 135 209  36  35  94 127  94  39 251  24 187 171 205 141  54 194
 154 239 125 132 144  81  97  12 162  39 252 202 145  57 220 110 234 155
 163 159 217 194 219  73  36 117 216 172 216  86  40 156  40 123  19  52
 229 214 220  18 143 192 225   3  11  75 253  30 124 187 255  53  71 245
 192  22  84 111 128 134  12  41 121 182  53 225 179 175  67  72 253  33
  43 124 110  29 163 142  38  20 126  41 157  45  30  46 126  49  95  89
  16  24 170  12 115 251 170  90  13 167  55 166 205  80  17  81  39  88
  36  29 175  70 239 148 105 186 245 127  27  58  70 185 186  90  57 138
 147 101 230 180 204 187 108  23 110  73  99  68  66 185 158  21 131  83
 164 118 243  69 241 192  39 150 232  86 103 201   6 211 149  26 158 121
  93 223  65 108   2 255 169 177 145  67 143  25 110 218 173 227 222 126
 138  73  21 178   1 181 171 224   1  43 101  97   0 179  82 230  89 159
  69 230 199 232 123 142 108 173 173 109 184 195 252  50 237 164 116  32
 172  86 162  18  86 214   0 234 183  78  72 121 135 172 224 129  52 105
 156  14  89   5  45 201 228 202 143  75 215 200 217 132 124 106 213  39
 132  33 132   4  63 154 230 241]
 
 next
 [ 67 193 187 100 233 221  94 150 253 156 159 248 119  29  80 200 173 235
  79 243 134  77  30  16   2 219  53 232 188 153  98  43  67 215  36  58
  76 156  72  52 159 169 107 224  36 117 223 209 145 207  51 187 250 238
  75  92 133 159 159  53  21 201  65 196 122 207 129 177 102 102 207 199
  17  29  88 162  85 250  60  42 182 154  87 168  48  28  52  14 135 245
 184  53  92 206  76 253 105 238 179 137 108  20 127  74  53 168   5 201
  49  79  44 133 216 210 213 190 126 122 119  48 109  85  92  31 179 159
 219 115  44 167 180 231   1 164 216 242  53  24 110  69 102  82 232  61
 122 213  30 213 213  72  36  87  62 142 241 137 151  53 186  16 217 222
 227  99 174  95  38 172 133 254 194  31   7 112   3 254 167  84 163  79
  44   7  46 141 170 109 115 234  83 119 113  45 234 140  25 108  60 188
  81 152 254  95 223 118 176  71 117 190 118 253 253 211  24 142   4 239
  94 123 114 163 168  82 177  67  44  12 132 130 126   0  16  15  58 158
 215 229 107 246  60 171  15 201 179  66 210  14 241  63  73 135 175  65
 192 131 161  55 187 182 234 165 157 196 213 167 240 118 187 123  80 107
  15 119 226 251 204 188  55   9 212  99 225  22 122 247   3 191   3 176
 231 230 221 171 187  69  45  91 147  24 109  21 123  83 155  69 157 251
 227  16 236   9  95 252  82 223 122  91  79 143  33 214 151  40  25 229
 211  81 209  40  31  11 127 223  13 157  38 133 218 196  46 166 229 123
  28 238 140  46 214  45  62 193 255  32 147 146 251  26 188 203  54 230
 219 162  87  97 243   9 242 185 126 144  11  12 168  18  32 222 159 242
 176 190 103 177  66 132  12 126 120 226 208  60   6 230 208  99  76  91
 243   5 199  67  12 182 229  38  71 238 168  51  17 170 143 250  70 121
 222 251 101 139  54  30  20 146 171  72 180 195 229 225  17 125  51 221
 120 140 170 187 191  58 120   2 188 242  81 180  80 250 173  51 121  53
 107 232  70 178 253 231 177 131   3   3 138 236 167 134 174 153 212 131
 159  88  66   4  84 218 111  10  95 202 106 162 135  42 222 176  84  53
  79 198 183 241 140   6 169  93 184 227  35 121 221  86 124  69 171 163
  51 131 229 236 172 148   8  13]
 
 


"""